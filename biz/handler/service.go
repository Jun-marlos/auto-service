// Code generated by hertz generator.

package handler

import (
	"context"
	"strconv"

	"github.com/cloudwego/goapi/biz/dal"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol"
)

// Ping .
func Ping(ctx context.Context, c *app.RequestContext) {
	c.JSON(200, utils.H{
		"message": "pong",
	})
}
func Login(ctx context.Context, c *app.RequestContext) {
	IP := c.RemoteAddr().String()
	IP = deletePort(IP)
	email := c.PostForm("email")
	pwd := c.PostForm("pwd")
	var uname, sessionId string
	var error_code int
	error_code = SUCCESS
	uname, sessionId, error_code = doRealLogin(ctx, email, pwd, IP)
	if sessionId != "" {
		c.SetCookie("session_id", sessionId, 24*60*60, "/", "z-coding.cn", protocol.CookieSameSiteLaxMode, false, false)
	}
	c.JSON(200, utils.H{
		"uname":      uname,
		"error_code": error_code,
	})
}
func Logout(ctx context.Context, c *app.RequestContext) {

}
func UserRegister(ctx context.Context, c *app.RequestContext) {

}
func ChangePwd(ctx context.Context, c *app.RequestContext) {

}
func ChangeEmail(ctx context.Context, c *app.RequestContext) {

}
func AhrRegister(ctx context.Context, c *app.RequestContext) {

}
func SendVerifyCode(ctx context.Context, c *app.RequestContext) {

}

func doRealLogin(ctx context.Context, email, pwd, IP string) (string, string, int) {
	if email == "" || pwd == "" {
		return "", "", BAD_PARAM
	}
	if pwd != dal.QueryUserPwd(email) {
		return "", "", PWD_ERROR
	}
	uname, uid := dal.QueryUserInfo(email)
	sessionId, error_code := makeSessionId(ctx, uid, IP)
	return uname, sessionId, error_code
}

func makeSessionId(ctx context.Context, uid int64, IP string) (string, int) {
	sessionId := RandomStringCreate()
	value := sessionId + IP
	key := "[sessionId]" + strconv.FormatInt(uid, 10)
	error_code := dal.RedisAdd(ctx, key, value)
	return sessionId, error_code
}
